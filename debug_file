""" debugger tools """
__author__ = 'Matt Weeks'
__email__  = 'matt.weeks@jpmorgan.com'
__status__ = 'Development'

from contextlib import contextmanager
import bdb
import pdb
import sys
import traceback
import time
import functools


# https://gist.github.com/ieure/193277
@contextmanager
def debug():
    """When use_pdb is True, enter the debugger if an exception is raised."""
    try:
        yield
    except Exception, e:
        info = sys.exc_info()
        traceback.print_exception(*info)
        pdb.post_mortem(info[2])

# https://gist.github.com/rctay/3169104
def auto_debug(type, value, tb):
    if hasattr(sys, 'ps1') \
        or not sys.stdin.isatty() \
        or not sys.stdout.isatty() \
        or not sys.stderr.isatty() \
        or issubclass(type, bdb.BdbQuit) \
        or issubclass(type, SyntaxError):
        # we are in interactive mode or we don't have a tty-like
        # device, so we call the default hook
        sys.__excepthook__(type, value, tb)
    else:
        # we are NOT in interactive mode, print the exception...
        traceback.print_exception(type, value, tb)
        print
        # ...then start the debugger in post-mortem mode.
        pdb.pm()



def timer(func):
    """Print the runtime of the decorated function"""
    @functools.wraps(func)
    def wrapper_timer(*args, **kwargs):
        start_time = time.time()    # 1
        value = func(*args, **kwargs)
        end_time = time.time()    # 2
        run_time = end_time - start_time    # 3
        print('Finished {0} in {1} secs'.format(func.__name__, run_time))
        return value
    return wrapper_timer




def memory_management(func, output_folder):
    @functools.wraps(func)
    def wrapper_check_memory(*args, **kwargs):
        import logging, logbee.api as logbee
        import matplotlib.pyplot as plt
        import datetime
        import sys
        import os
        sys.excepthook = auto_debug
        label = datetime.datetime.now().strftime('%Y%m%d-%H%M')
        logbee.basicConfig(level=logging.INFO, logbee='plus2(0.5)', filename = os.path.join(output_folder, 'log_app_{0}.txt'.format(label)))
        
        value = func(*args, **kwargs)
        
        logging.info('Finish check memory')
        logdf = logbee.load(os.path.join(output_folder, 'log_app_{0}.txt'.format(label)))
        logdf['availablemem_gb'].plot()
        plt.savefig(os.path.join(output_folder, 'figure_app_{0}.png'.format(label)))
        return value
    return wrapper_check_memory
